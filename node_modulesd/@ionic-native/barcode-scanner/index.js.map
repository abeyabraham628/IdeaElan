{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/barcode-scanner/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8GpC,kCAAiB;;;uBAM/C;YACF,SAAS,EAAE,WAAW;YACtB,UAAU,EAAE,YAAY;YACxB,UAAU,EAAE,YAAY;YACxB,QAAQ,EAAE,UAAU;SACrB;;;IAED;;;;OAIG;;;;;;IAIH,6BAAI;;;;;cAAC,OAA+B;QAClC,MAAM,CAAC;KACR;IAED;;;;;;OAMG;;;;;;;;IAEH,+BAAM;;;;;;;cAAC,IAAY,EAAE,IAAS;QAC5B,MAAM,CAAC;KACR;;gBApCF,UAAU;;;QAmBR,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;8CAGD;;QASA,OAAO,EAAE;;;;gDAGT;;;;;;;;;;;;;;;;;;;;;;;;;;;IAnCU,cAAc;QAR1B,MAAM,CAAC;YACN,UAAU,EAAE,gBAAgB;YAC5B,MAAM,EAAE,gCAAgC;YACxC,SAAS,EAAE,gCAAgC;YAC3C,IAAI,EAAE,4DAA4D;YAClE,SAAS,EAAE,CAAC,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACrE,CAAC;OAEW,cAAc,EAoC1B;yBAnJD;EA+GoC,iBAAiB;SAAxC,cAAc","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface BarcodeScannerOptions {\n  /**\n   * Prefer front camera. Supported on iOS and Android.\n   */\n  preferFrontCamera?: boolean;\n\n  /**\n   * Show flip camera button. Supported on iOS and Android.\n   */\n  showFlipCameraButton?: boolean;\n\n  /**\n   * Show torch button. Supported on iOS and Android.\n   */\n  showTorchButton?: boolean;\n\n  /**\n   * Disable animations. Supported on iOS only.\n   */\n  disableAnimations?: boolean;\n\n  /**\n   * Disable success beep. Supported on iOS only.\n   */\n  disableSuccessBeep?: boolean;\n\n  /**\n   * Prompt text. Supported on Android only.\n   */\n  prompt?: string;\n\n  /**\n   * Formats separated by commas. Defaults to all formats except `PDF_417` and `RSS_EXPANDED`.\n   */\n  formats?: string;\n\n  /**\n   * Orientation. Supported on Android only. Can be set to `portrait` or `landscape`. Defaults to none so the user can rotate the phone and pick an orientation.\n   */\n  orientation?: string;\n\n  /**\n   * Launch with the torch switched on (if available). Supported on Android only.\n   */\n  torchOn?: boolean;\n\n  /**\n   * Display scanned text for X ms. 0 suppresses it entirely, default 1500. Supported on Android only.\n   */\n  resultDisplayDuration?: number;\n}\n\nexport interface BarcodeScanResult {\n  format:\n    | 'QR_CODE'\n    | 'DATA_MATRIX'\n    | 'UPC_E'\n    | 'UPC_A'\n    | 'EAN_8'\n    | 'EAN_13'\n    | 'CODE_128'\n    | 'CODE_39'\n    | 'CODE_93'\n    | 'CODABAR'\n    | 'ITF'\n    | 'RSS14'\n    | 'RSS_EXPANDED'\n    | 'PDF_417'\n    | 'AZTEC'\n    | 'MSI';\n  cancelled: boolean;\n  text: string;\n}\n\n/**\n * @name Barcode Scanner\n * @description\n * The Barcode Scanner Plugin opens a camera view and automatically scans a barcode, returning the data back to you.\n *\n * Requires Cordova plugin: `phonegap-plugin-barcodescanner`. For more info, please see the [BarcodeScanner plugin docs](https://github.com/phonegap/phonegap-plugin-barcodescanner).\n *\n * @usage\n * ```typescript\n * import { BarcodeScanner } from '@ionic-native/barcode-scanner';\n *\n * constructor(private barcodeScanner: BarcodeScanner) { }\n *\n * ...\n *\n *\n * this.barcodeScanner.scan().then(barcodeData => {\n *  console.log('Barcode data', barcodeData);\n * }).catch(err => {\n * \tconsole.log('Error', err);\n * });\n * ```\n * @interfaces\n * BarcodeScannerOptions\n * BarcodeScanResult\n */\n@Plugin({\n  pluginName: 'BarcodeScanner',\n  plugin: 'phonegap-plugin-barcodescanner',\n  pluginRef: 'cordova.plugins.barcodeScanner',\n  repo: 'https://github.com/phonegap/phonegap-plugin-barcodescanner',\n  platforms: ['Android', 'BlackBerry 10', 'Browser', 'iOS', 'Windows']\n})\n@Injectable()\nexport class BarcodeScanner extends IonicNativePlugin {\n  Encode: {\n    TEXT_TYPE: string;\n    EMAIL_TYPE: string;\n    PHONE_TYPE: string;\n    SMS_TYPE: string;\n  } = {\n    TEXT_TYPE: 'TEXT_TYPE',\n    EMAIL_TYPE: 'EMAIL_TYPE',\n    PHONE_TYPE: 'PHONE_TYPE',\n    SMS_TYPE: 'SMS_TYPE'\n  };\n\n  /**\n   * Open the barcode scanner.\n   * @param {BarcodeScannerOptions} [options] Optional options to pass to the scanner\n   * @returns {Promise<any>} Returns a Promise that resolves with scanner data, or rejects with an error.\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  scan(options?: BarcodeScannerOptions): Promise<BarcodeScanResult> {\n    return;\n  }\n\n  /**\n   * Encodes data into a barcode.\n   * NOTE: not well supported on Android\n   * @param {string} type Type of encoding\n   * @param {any} data Data to encode\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  encode(type: string, data: any): Promise<any> {\n    return;\n  }\n}\n"]}