{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/camera/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AAsFxE,MAAM,CAAN,IAAY,eAIX;AAJD,WAAY,eAAe;IACzB,6DAAY,CAAA;IACZ,6DAAQ,CAAA;IACR,iEAAU,CAAA;GAHA,eAAe,KAAf,eAAe,QAI1B;AAED,MAAM,CAAN,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,+CAAQ,CAAA;IACR,6CAAG,CAAA;GAFO,YAAY,KAAZ,YAAY,QAGvB;AAED,MAAM,CAAN,IAAY,SAIX;AAJD,WAAY,SAAS;IACnB,+CAAW,CAAA;IACX,2CAAK,CAAA;IACL,iDAAQ,CAAA;GAHE,SAAS,KAAT,SAAS,QAIpB;AAED,MAAM,CAAN,IAAY,iBAIX;AAJD,WAAY,iBAAiB;IAC3B,yEAAgB,CAAA;IAChB,6DAAM,CAAA;IACN,+EAAe,CAAA;GAHL,iBAAiB,KAAjB,iBAAiB,QAI5B;AAED,MAAM,CAAN,IAAY,qBAMX;AAND,WAAY,qBAAqB;IAC/B,yEAAY,CAAA;IACZ,6EAAU,CAAA;IACV,6EAAU,CAAA;IACV,+EAAW,CAAA;IACX,2EAAS,CAAA;GALC,qBAAqB,KAArB,qBAAqB,QAMhC;AAED,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,yCAAQ,CAAA;IACR,2CAAK,CAAA;GAFK,SAAS,KAAT,SAAS,QAGpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqD2B,0BAAiB;;;;;;gCAIzB;;YAEhB,QAAQ,EAAE,CAAC;;YAEX,QAAQ,EAAE,CAAC;;YAEX,UAAU,EAAE,CAAC;SACd;;;;6BAKc;;YAEb,IAAI,EAAE,CAAC;;YAEP,GAAG,EAAE,CAAC;SACP;;;;0BAKW;;YAEV,OAAO,EAAE,CAAC;;YAEV,KAAK,EAAE,CAAC;;YAER,QAAQ,EAAE,CAAC;SACZ;;;;kCAKmB;;YAElB,YAAY,EAAE,CAAC;;YAEf,MAAM,EAAE,CAAC;;YAET,eAAe,EAAE,CAAC;SACnB;;;;sCAKuB;YACtB,QAAQ,EAAE,CAAC;YACX,UAAU,EAAE,CAAC;YACb,UAAU,EAAE,CAAC;YACb,WAAW,EAAE,CAAC;YACd,SAAS,EAAE,EAAE;SACd;;;;0BAKW;;YAEV,IAAI,EAAE,CAAC;;YAEP,KAAK,EAAE,CAAC;SACT;;;IAED;;;;OAIG;;;;;;IAIH,2BAAU;;;;;cAAC,OAAuB;QAChC,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAIH,wBAAO;;;;;;QACL,MAAM,CAAC;KACR;;gBA3FF,UAAU;;;QA0ER,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;4CAGD;;QAOA,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;;;;yCAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA1FU,MAAM;QARlB,MAAM,CAAC;YACN,UAAU,EAAE,QAAQ;YACpB,MAAM,EAAE,uBAAuB;YAC/B,SAAS,EAAE,kBAAkB;YAC7B,IAAI,EAAE,iDAAiD;YACvD,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACpD,CAAC;OAEW,MAAM,EA2FlB;iBAzQD;EA8K4B,iBAAiB;SAAhC,MAAM","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface CameraOptions {\n  /** Picture quality in range 0-100. Default is 50 */\n  quality?: number;\n  /**\n   * Choose the format of the return value.\n   * Defined in Camera.DestinationType. Default is FILE_URI.\n   *      DATA_URL : 0,   Return image as base64-encoded string (DATA_URL can be very memory intensive and cause app crashes or out of memory errors. Use FILE_URI or NATIVE_URI if possible),\n   *      FILE_URI : 1,   Return image file URI,\n   *      NATIVE_URI : 2  Return image native URI\n   *          (e.g., assets-library:// on iOS or content:// on Android)\n   */\n  destinationType?: number;\n  /**\n   * Set the source of the picture.\n   * Defined in Camera.PictureSourceType. Default is CAMERA.\n   *      PHOTOLIBRARY : 0,\n   *      CAMERA : 1,\n   *      SAVEDPHOTOALBUM : 2\n   */\n  sourceType?: number;\n  /** Allow simple editing of image before selection. */\n  allowEdit?: boolean;\n  /**\n   * Choose the returned image file's encoding.\n   * Defined in Camera.EncodingType. Default is JPEG\n   *      JPEG : 0    Return JPEG encoded image\n   *      PNG : 1     Return PNG encoded image\n   */\n  encodingType?: number;\n  /**\n   * Width in pixels to scale image. Must be used with targetHeight.\n   * Aspect ratio remains constant.\n   */\n  targetWidth?: number;\n  /**\n   * Height in pixels to scale image. Must be used with targetWidth.\n   * Aspect ratio remains constant.\n   */\n  targetHeight?: number;\n  /**\n   * Set the type of media to select from. Only works when PictureSourceType\n   * is PHOTOLIBRARY or SAVEDPHOTOALBUM. Defined in Camera.MediaType\n   *      PICTURE: 0      allow selection of still pictures only. DEFAULT.\n   *          Will return format specified via DestinationType\n   *      VIDEO: 1        allow selection of video only, WILL ALWAYS RETURN FILE_URI\n   *      ALLMEDIA : 2    allow selection from all media types\n   */\n  mediaType?: number;\n  /** Rotate the image to correct for the orientation of the device during capture. */\n  correctOrientation?: boolean;\n  /** Save the image to the photo album on the device after capture. */\n  saveToPhotoAlbum?: boolean;\n  /**\n   * Choose the camera to use (front- or back-facing).\n   * Defined in Camera.Direction. Default is BACK.\n   *      BACK: 0\n   *      FRONT: 1\n   */\n  cameraDirection?: number;\n  /** iOS-only options that specify popover location in iPad. Defined in CameraPopoverOptions. */\n  popoverOptions?: CameraPopoverOptions;\n}\n\n/**\n * iOS-only parameters that specify the anchor element location and arrow direction\n * of the popover when selecting images from an iPad's library or album.\n */\nexport interface CameraPopoverOptions {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  /**\n   * Direction the arrow on the popover should point. Defined in Camera.PopoverArrowDirection\n   * Matches iOS UIPopoverArrowDirection constants.\n   *      ARROW_UP : 1,\n   *      ARROW_DOWN : 2,\n   *      ARROW_LEFT : 4,\n   *      ARROW_RIGHT : 8,\n   *      ARROW_ANY : 15\n   */\n  arrowDir: number;\n}\n\nexport enum DestinationType {\n  DATA_URL = 0,\n  FILE_URL,\n  NATIVE_URI\n}\n\nexport enum EncodingType {\n  JPEG = 0,\n  PNG\n}\n\nexport enum MediaType {\n  PICTURE = 0,\n  VIDEO,\n  ALLMEDIA\n}\n\nexport enum PictureSourceType {\n  PHOTOLIBRARY = 0,\n  CAMERA,\n  SAVEDPHOTOALBUM\n}\n\nexport enum PopoverArrowDirection {\n  ARROW_UP = 1,\n  ARROW_DOWN,\n  ARROW_LEFT,\n  ARROW_RIGHT,\n  ARROW_ANY\n}\n\nexport enum Direction {\n  BACK = 0,\n  FRONT\n}\n\n/**\n * @name Camera\n * @description\n * Take a photo or capture video.\n *\n * Requires the Cordova plugin: `cordova-plugin-camera`. For more info, please see the [Cordova Camera Plugin Docs](https://github.com/apache/cordova-plugin-camera).\n *\n * [Warning] Since IOS 10 the camera requires permissions to be placed in your config.xml add\n * ```xml\n * <config-file parent=\"NSCameraUsageDescription\" platform=\"ios\" target=\"*-Info.plist\">\n *  <string>You can take photos</string>\n * </config-file>\n * ```\n * inside of the <platform name='ios> section\n *\n * @usage\n * ```typescript\n * import { Camera, CameraOptions } from '@ionic-native/camera';\n *\n * constructor(private camera: Camera) { }\n *\n * ...\n *\n *\n * const options: CameraOptions = {\n *   quality: 100,\n *   destinationType: this.camera.DestinationType.FILE_URI,\n *   encodingType: this.camera.EncodingType.JPEG,\n *   mediaType: this.camera.MediaType.PICTURE\n * }\n *\n * this.camera.getPicture(options).then((imageData) => {\n *  // imageData is either a base64 encoded string or a file URI\n *  // If it's base64 (DATA_URL):\n *  let base64Image = 'data:image/jpeg;base64,' + imageData;\n * }, (err) => {\n *  // Handle error\n * });\n * ```\n * @interfaces\n * CameraOptions\n * CameraPopoverOptions\n */\n@Plugin({\n  pluginName: 'Camera',\n  plugin: 'cordova-plugin-camera',\n  pluginRef: 'navigator.camera',\n  repo: 'https://github.com/apache/cordova-plugin-camera',\n  platforms: ['Android', 'Browser', 'iOS', 'Windows']\n})\n@Injectable()\nexport class Camera extends IonicNativePlugin {\n  /**\n   * Constant for possible destination types\n   */\n  DestinationType = {\n    /** Return base64 encoded string. DATA_URL can be very memory intensive and cause app crashes or out of memory errors. Use FILE_URI or NATIVE_URI if possible */\n    DATA_URL: 0,\n    /** Return file uri (content://media/external/images/media/2 for Android) */\n    FILE_URI: 1,\n    /** Return native uri (eg. asset-library://... for iOS) */\n    NATIVE_URI: 2\n  };\n\n  /**\n   * Convenience constant\n   */\n  EncodingType = {\n    /** Return JPEG encoded image */\n    JPEG: 0,\n    /** Return PNG encoded image */\n    PNG: 1\n  };\n\n  /**\n   * Convenience constant\n   */\n  MediaType = {\n    /** Allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType */\n    PICTURE: 0,\n    /** Allow selection of video only, ONLY RETURNS URL */\n    VIDEO: 1,\n    /** Allow selection from all media types */\n    ALLMEDIA: 2\n  };\n\n  /**\n   * Convenience constant\n   */\n  PictureSourceType = {\n    /** Choose image from picture library (same as SAVEDPHOTOALBUM for Android) */\n    PHOTOLIBRARY: 0,\n    /** Take picture from camera */\n    CAMERA: 1,\n    /** Choose image from picture library (same as PHOTOLIBRARY for Android) */\n    SAVEDPHOTOALBUM: 2\n  };\n\n  /**\n   * Convenience constant\n   */\n  PopoverArrowDirection = {\n    ARROW_UP: 1,\n    ARROW_DOWN: 2,\n    ARROW_LEFT: 4,\n    ARROW_RIGHT: 8,\n    ARROW_ANY: 15\n  };\n\n  /**\n   * Convenience constant\n   */\n  Direction = {\n    /** Use the back-facing camera */\n    BACK: 0,\n    /** Use the front-facing camera */\n    FRONT: 1\n  };\n\n  /**\n   * Take a picture or video, or load one from the library.\n   * @param {CameraOptions} [options] Options that you want to pass to the camera. Encoding type, quality, etc. Platform-specific quirks are described in the [Cordova plugin docs](https://github.com/apache/cordova-plugin-camera#cameraoptions-errata-).\n   * @returns {Promise<any>} Returns a Promise that resolves with Base64 encoding of the image data, or the image file URI, depending on cameraOptions, otherwise rejects with an error.\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getPicture(options?: CameraOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   * Remove intermediate image files that are kept in temporary storage after calling camera.getPicture.\n   * Applies only when the value of Camera.sourceType equals Camera.PictureSourceType.CAMERA and the Camera.destinationType equals Camera.DestinationType.FILE_URI.\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  cleanup(): Promise<any> {\n    return;\n  }\n}\n"]}