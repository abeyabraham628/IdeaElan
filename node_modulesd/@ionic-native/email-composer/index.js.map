{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/email-composer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EACL,OAAO,EACP,YAAY,EACZ,iBAAiB,EACjB,MAAM,EACP,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgHO,iCAAiB;;;;sBAAvC,aAAa;IACxB;;;OAGG;;;;;IAKH,qCAAa;;;;;QACX,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAKH,yCAAiB;;;;;QACf,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,mCAAW;;;;;;cAAC,GAAY;QACtB,MAAM,CAAC,IAAI,OAAO,CAAU,UAAC,OAAO,EAAE,MAAM;YAC1C,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,eAAa,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,GAAG,EAAE,UAAC,WAAoB;oBAC9D,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBAChB,OAAO,EAAE,CAAC;qBACX;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,EAAE,CAAC;qBACV;iBACF,CAAC,CAAC;aACJ;YAAC,IAAI,CAAC,CAAC;gBACN,eAAa,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,UAAC,WAAoB;oBACzD,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBAChB,OAAO,EAAE,CAAC;qBACX;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,EAAE,CAAC;qBACV;iBACF,CAAC,CAAC;aACJ;SACF,CAAC,CAAC;KACJ;IAED;;;;;;OAMG;;;;;;;;IAKH,4BAAI;;;;;;;cAAC,OAA6B,EAAE,KAAW;QAC7C,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,gCAAQ;;;;;;cAAC,KAAa,EAAE,WAAmB,KAAU;;gBA7EtD,UAAU;;;QAMR,OAAO,CAAC;YACP,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;sDAGD;;QAMA,OAAO,CAAC;YACP,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;0DAGD;;QAQA,YAAY,EAAE;;;;oDAqBd;;QASA,OAAO,CAAC;YACP,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;6CAGD;;QAQA,OAAO,EAAE;;;;iDAC2C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA5E1C,aAAa;QARzB,MAAM,CAAC;YACN,UAAU,EAAE,eAAe;YAC3B,MAAM,EAAE,+BAA+B;YACvC,SAAS,EAAE,uBAAuB;YAClC,IAAI,EAAE,yDAAyD;YAC/D,SAAS,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC;SAC/E,CAAC;OAEW,aAAa,EA6EzB;wBAnMD;;EAsHmC,iBAAiB;SAAvC,aAAa","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Cordova,\n  CordovaCheck,\n  IonicNativePlugin,\n  Plugin\n} from '@ionic-native/core';\n\nexport interface EmailComposerOptions {\n  /**\n   * App to send the email with\n   */\n  app?: string;\n\n  /**\n   * Email address(es) for To field\n   */\n  to?: string | string[];\n\n  /**\n   * Email address(es) for CC field\n   */\n  cc?: string | string[];\n\n  /**\n   * Email address(es) for BCC field\n   */\n  bcc?: string | string[];\n\n  /**\n   * File paths or base64 data streams\n   */\n  attachments?: string[];\n\n  /**\n   * Subject of the email\n   */\n  subject?: string;\n\n  /**\n   * Email body (for HTML, set isHtml to true)\n   */\n  body?: string;\n\n  /**\n   * Indicates if the body is HTML or plain text\n   */\n  isHtml?: boolean;\n\n  /**\n   *  Content type of the email (Android only)\n   */\n  type?: string;\n}\n\n/**\n * @name Email Composer\n * @description\n *\n * Requires Cordova plugin: cordova-plugin-email-composer. For more info, please see the [Email Composer plugin docs](https://github.com/hypery2k/cordova-email-plugin).\n *\n *\n * @usage\n * ```typescript\n * import { EmailComposer } from '@ionic-native/email-composer';\n *\n * constructor(private emailComposer: EmailComposer) { }\n *\n * ...\n *\n *\n * this.emailComposer.isAvailable().then((available: boolean) =>{\n *  if(available) {\n *    //Now we know we can send\n *  }\n * });\n *\n * let email = {\n *   to: 'max@mustermann.de',\n *   cc: 'erika@mustermann.de',\n *   bcc: ['john@doe.com', 'jane@doe.com'],\n *   attachments: [\n *     'file://img/logo.png',\n *     'res://icon.png',\n *     'base64:icon.png//iVBORw0KGgoAAAANSUhEUg...',\n *     'file://README.pdf'\n *   ],\n *   subject: 'Cordova Icons',\n *   body: 'How are you? Nice greetings from Leipzig',\n *   isHtml: true\n * };\n *\n * // Send a text message using default options\n * this.emailComposer.open(email);\n * ```\n *\n * You can also assign aliases to email apps\n * ```ts\n * // add alias\n * this.email.addAlias('gmail', 'com.google.android.gm');\n *\n * // then use alias when sending email\n * this.email.open({\n *   app: 'gmail',\n *   ...\n * });\n * ```\n * @interfaces\n * EmailComposerOptions\n */\n@Plugin({\n  pluginName: 'EmailComposer',\n  plugin: 'cordova-plugin-email-composer',\n  pluginRef: 'cordova.plugins.email',\n  repo: 'https://github.com/katzer/cordova-plugin-email-composer',\n  platforms: ['Amazon Fire OS', 'Android', 'Browser', 'iOS', 'Windows', 'macOS']\n})\n@Injectable()\nexport class EmailComposer extends IonicNativePlugin {\n  /**\n   * Checks if the app has a permission to access email accounts information\n   * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates if the permission was granted\n   */\n  @Cordova({\n    successIndex: 0,\n    errorIndex: 2\n  })\n  hasPermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Request permission to access email accounts information\n   * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates if the permission was granted\n   */\n  @Cordova({\n    successIndex: 0,\n    errorIndex: 2\n  })\n  requestPermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Verifies if sending emails is supported on the device.\n   *\n   * @param {string} [app] App id or uri scheme.\n   * @returns {Promise<any>} Resolves if available, rejects if not available\n   */\n  @CordovaCheck()\n  isAvailable(app?: string): Promise<any> {\n    return new Promise<boolean>((resolve, reject) => {\n      if (app) {\n        EmailComposer.getPlugin().isAvailable(app, (isAvailable: boolean) => {\n          if (isAvailable) {\n            resolve();\n          } else {\n            reject();\n          }\n        });\n      } else {\n        EmailComposer.getPlugin().isAvailable((isAvailable: boolean) => {\n          if (isAvailable) {\n            resolve();\n          } else {\n            reject();\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Displays the email composer pre-filled with data.\n   *\n   * @param {EmailComposerOptions} options Email\n   * @param {any} [scope] Scope for the promise\n   * @returns {Promise<any>} Resolves promise when the EmailComposer has been opened\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 3\n  })\n  open(options: EmailComposerOptions, scope?: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Adds a new mail app alias.\n   *\n   * @param {string} alias The alias name\n   * @param {string} packageName The package name\n   */\n  @Cordova()\n  addAlias(alias: string, packageName: string): void {}\n}\n"]}