{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/fcm/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AACxE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6DpB,uBAAiB;;;;IACxC;;;;OAIG;;;;;;IAEH,sBAAQ;;;;;;QACN,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAIH,4BAAc;;;;;;QACZ,MAAM,CAAC;KACR;IAED;;;;;;OAMG;;;;;;;;IAEH,8BAAgB;;;;;;;cAAC,KAAa;QAC5B,MAAM,CAAC;KACR;IAED;;;;;;OAMG;;;;;;;;IAEH,kCAAoB;;;;;;;cAAC,KAAa;QAChC,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAMH,4BAAc;;;;;;QACZ,MAAM,CAAC;KACR;;gBA5DF,UAAU;;;QAOR,OAAO,EAAE;;;;uCAGT;;QAOA,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;SACjB,CAAC;;;wCACgB,UAAU;6CAE3B;;QASA,OAAO,EAAE;;;;+CAGT;;QASA,OAAO,EAAE;;;;mDAGT;;QAOA,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;wCACgB,UAAU;6CAE3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA3DU,GAAG;QARf,MAAM,CAAC;YACN,UAAU,EAAE,KAAK;YACjB,MAAM,EAAE,2CAA2C;YACnD,SAAS,EAAE,WAAW;YACtB,IAAI,EAAE,2EAA2E;YACjF,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,GAAG,EA4Df;cA3HD;EA+DyB,iBAAiB;SAA7B,GAAG","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface NotificationData {\n  /**\n   * Determines whether the notification was pressed or not\n   */\n\n  wasTapped: boolean;\n\n  /**\n   * Notification data hash item\n   */\n\n  [name: string]: any;\n}\n\n/**\n * @name FCM\n * @description\n * Provides basic functionality for Firebase Cloud Messaging\n *\n * @usage\n * ```typescript\n * import { FCM } from '@ionic-native/fcm';\n *\n * constructor(private fcm: FCM) {}\n *\n * ...\n *\n * this.fcm.subscribeToTopic('marketing');\n *\n * this.fcm.getToken().then(token => {\n *   backend.registerToken(token);\n * });\n *\n * this.fcm.onNotification().subscribe(data => {\n *   if(data.wasTapped){\n *     console.log(\"Received in background\");\n *   } else {\n *     console.log(\"Received in foreground\");\n *   };\n * });\n *\n * this.fcm.onTokenRefresh().subscribe(token => {\n *   backend.registerToken(token);\n * });\n *\n * this.fcm.unsubscribeFromTopic('marketing');\n *\n * ```\n * @interfaces\n * NotificationData\n */\n@Plugin({\n  pluginName: 'FCM',\n  plugin: 'cordova-plugin-fcm-with-dependecy-updated',\n  pluginRef: 'FCMPlugin',\n  repo: 'https://github.com/andrehtissot/cordova-plugin-fcm-with-dependecy-updated',\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class FCM extends IonicNativePlugin {\n  /**\n   * Gets device's current registration id\n   *\n   * @returns {Promise<string>} Returns a Promise that resolves with the registration id token\n   */\n  @Cordova()\n  getToken(): Promise<string> {\n    return;\n  }\n\n  /**\n   * Event firing on the token refresh\n   *\n   * @returns {Observable<string>} Returns an Observable that notifies with the change of device's registration id\n   */\n  @Cordova({\n    observable: true\n  })\n  onTokenRefresh(): Observable<string> {\n    return;\n  }\n\n  /**\n   * Subscribes you to a [topic](https://firebase.google.com/docs/notifications/android/console-topics)\n   *\n   * @param {string} topic Topic to be subscribed to\n   *\n   * @returns {Promise<any>} Returns a promise resolving in result of subscribing to a topic\n   */\n  @Cordova()\n  subscribeToTopic(topic: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Unsubscribes you from a [topic](https://firebase.google.com/docs/notifications/android/console-topics)\n   *\n   * @param {string} topic Topic to be unsubscribed from\n   *\n   * @returns {Promise<any>} Returns a promise resolving in result of unsubscribing from a topic\n   */\n  @Cordova()\n  unsubscribeFromTopic(topic: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Watch for incoming notifications\n   *\n   * @returns {Observable<any>} returns an object with data from the notification\n   */\n  @Cordova({\n    observable: true,\n    successIndex: 0,\n    errorIndex: 2\n  })\n  onNotification(): Observable<NotificationData> {\n    return;\n  }\n}\n"]}