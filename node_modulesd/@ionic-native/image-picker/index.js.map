{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/image-picker/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AAgCxE,MAAM,CAAN,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,mDAAY,CAAA;IACZ,mDAAQ,CAAA;GAFE,UAAU,KAAV,UAAU,QAGrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuCgC,+BAAiB;;;;IAChD;;;;;OAKG;;;;;;;IAIH,iCAAW;;;;;;cAAC,OAA2B,IAAkB,MAAM,CAAC,EAAE;IAElE;;;OAGG;;;;;IAIH,uCAAiB;;;;kBAAuB,MAAM,CAAC,EAAE;IAEjD;;;OAGG;;;;;IAIH,2CAAqB;;;;kBAAmB,MAAM,CAAC,EAAE;;gBA7BlD,UAAU;;;QAQR,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;kDACgE;;QAMjE,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,SAAS,CAAC;SACvB,CAAC;;;;wDAC+C;;QAMhD,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,SAAS,CAAC;SACvB,CAAC;;;;4DAC+C;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA5BtC,WAAW;QAVvB,MAAM,CAAC;YACN,UAAU,EAAE,aAAa;YACzB,MAAM,EAAE,oCAAoC;YAC5C,SAAS,EAAE,oBAAoB;YAC/B,IAAI,EAAE,yDAAyD;YAC/D,OAAO,EAAE,6HAA6H;YACtI,gBAAgB,EAAE,CAAC,iCAAiC,CAAC;YACrD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,WAAW,EA8BvB;sBAzGD;EA2EiC,iBAAiB;SAArC,WAAW","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n\nexport interface ImagePickerOptions {\n  /**\n   * max images to be selected, defaults to 15. If this is set to 1, upon selection of a single image, the plugin will return it. (Android only)\n   */\n  maximumImagesCount?: number;\n\n  /**\n   * Max width to allow images to be\n   */\n  width?: number;\n  /**\n   * Max height to allow images to be\n   */\n  height?: number;\n\n  /**\n   * Quality of images, defaults to 100\n   */\n  quality?: number;\n\n  /**\n   * Choose the format of the return value.\n   * Defined in ImagePicker.OutputType. Default is FILE_URI.\n   *      FILE_URI : 0,   Return image file URI,\n   *      DATA_URL : 1,   Return image as base64-encoded string\n   */\n  outputType?: number;\n}\n\nexport enum OutputType {\n  FILE_URL = 0,\n  DATA_URL\n}\n\n/**\n * @name Image Picker\n * @description\n * Cordova Plugin For Multiple Image Selection\n *\n * Requires Cordova plugin: `cordova-plugin-image-picker`.\n * For more info, please see the https://github.com/wymsee/cordova-imagePicker\n *\n * @usage\n * ```typescript\n * import { ImagePicker } from '@ionic-native/image-picker';\n *\n *\n * constructor(private imagePicker: ImagePicker) { }\n *\n * ...\n *\n * this.imagePicker.getPictures(options).then((results) => {\n *   for (var i = 0; i < results.length; i++) {\n *       console.log('Image URI: ' + results[i]);\n *   }\n * }, (err) => { });\n *\n * ```\n * @interfaces\n * ImagePickerOptions\n */\n@Plugin({\n  pluginName: 'ImagePicker',\n  plugin: 'cordova-plugin-telerik-imagepicker',\n  pluginRef: 'window.imagePicker',\n  repo: 'https://github.com/Telerik-Verified-Plugins/ImagePicker',\n  install: 'ionic cordova plugin add cordova-plugin-telerik-imagepicker --variable PHOTO_LIBRARY_USAGE_DESCRIPTION=\"your usage message\"',\n  installVariables: ['PHOTO_LIBRARY_USAGE_DESCRIPTION'],\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class ImagePicker extends IonicNativePlugin {\n  /**\n   * Pick pictures from the library.\n   * @param {ImagePickerOptions} options\n   * @returns {Promise<any>} Returns a Promise that resolves the image file URI\n   * otherwise rejects with an error.\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getPictures(options: ImagePickerOptions): Promise<any> { return; }\n\n  /**\n   * Check if we have permission to read images\n   * @returns {Promise<boolean>} Returns a promise that resolves with a boolean that indicates whether we have permission\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  hasReadPermission(): Promise<boolean> { return; }\n\n  /**\n   * Request permission to read images\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  requestReadPermission(): Promise<any> { return; }\n\n}\n"]}